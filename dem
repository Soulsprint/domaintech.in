<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Task Management</title>
    <link rel="stylesheet" href="Employee1.css">
</head>
<body>

    <style>
        * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    transition: all 0.3s ease;
}

@keyframes gradientBackground {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes pulse {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.05);
    }
    100% {
        transform: scale(1);
    }
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(45deg, #3c2a21, #1a120b, #3c2a21);
    background-size: 400% 400%;
    animation: gradientBackground 15s ease infinite;
    color: #e5e5cb;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-image: url("approve.png");
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

.container {
    display: flex;
    width: 850px;
    height: 550px;
    border: none;
    border-radius: 15px;
    overflow: hidden;
    background-color: #252525;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
    animation: fadeIn 0.8s ease-out;
}

/* Task list section */
.task-list {
    width: 35%;
    background-color: #252525;
    overflow-y: auto;
    padding: 20px;
    border-right: 1px solid rgba(210, 180, 140, 0.3);
}

.task-list h3 {
    color: #d2b48c;
    margin-bottom: 20px;
    font-size: 1.3rem;
    font-weight: 600;
    text-align: center;
    text-shadow: 0 0 10px rgba(210, 180, 140, 0.6);
    animation: pulse 2s infinite;
}

.task-item {
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 10px;
    background-color: #333333;
    color: #e5e5cb;
    cursor: pointer;
    transition: all 0.3s;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.6s ease-out;
    border-left: 3px solid transparent;
}

.task-item:hover {
    background-color: #3c3c3c;
    transform: translateY(-3px);
    border-left: 3px solid #d2b48c;
    box-shadow: 0 6px 12px rgba(210, 180, 140, 0.4);
}

/* Task window section */
.task-window {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 25px;
    background-color: #2a2a2a;
    color: #e5e5cb;
}

.task-details {
    background-color: #353535;
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    max-height: 400px;
    overflow-y: auto;
    animation: fadeIn 0.8s ease-out;
    scrollbar-width: thin;
    scrollbar-color: #d2b48c #3c2a21;
}

.task-details::-webkit-scrollbar {
    width: 8px;
}

.task-details::-webkit-scrollbar-track {
    background: #252525;
    border-radius: 10px;
}

.task-details::-webkit-scrollbar-thumb {
    background: #d2b48c;
    border-radius: 10px;
}

.task-details h3 {
    color: #d2b48c;
    margin-bottom: 20px;
    font-size: 1.3rem;
    font-weight: 600;
    text-align: center;
    text-shadow: 0 0 10px rgba(210, 180, 140, 0.6);
}

.task-details p {
    color: #e5e5cb;
    margin: 15px 0;
    padding: 15px;
    background-color: #404040;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    animation: fadeIn 0.5s ease-out;
    border-left: 3px solid #d2b48c;
    transition: all 0.3s;
}

.task-details p:hover {
    background-color: #454545;
    transform: translateX(5px);
    box-shadow: 0 4px 10px rgba(210, 180, 140, 0.4);
}

/* Task submission section */
.task-submit {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background-color: #353535;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

#submit-task-btn {
    padding: 12px 25px;
    border: none;
    border-radius: 8px;
    background-color: #8b5a2b;
    color: #fff;
    cursor: pointer;
    font-weight: 600;
    box-shadow: 0 4px 10px rgba(139, 90, 43, 0.5);
    transition: all 0.3s;
}

#submit-task-btn:hover {
    background-color: #a0692e;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(210, 180, 140, 0.7);
}

#status-btn, #condition-btn {
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    background-color: #6b5b73;
    color: #fff;
    cursor: pointer;
    font-weight: 600;
    box-shadow: 0 4px 10px rgba(107, 91, 115, 0.5);
    transition: all 0.3s;
    position: relative;
}

#status-btn:hover, #condition-btn:hover {
    background-color: #7a6682;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(210, 180, 140, 0.7);
}

/* Dropdown styles */
.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-content {
    display: none;
    position: absolute;
    background-color: #404040;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
    border-radius: 8px;
    overflow: hidden;
    bottom: 100%;
    margin-bottom: 5px;
}

.dropdown-content button {
    color: #e5e5cb;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    width: 100%;
    text-align: left;
    background-color: transparent;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.dropdown-content button:hover {
    background-color: #555555;
    transform: none;
    box-shadow: none;
}

.dropdown:hover .dropdown-content {
    display: block;
}

/* Sidebar */
.sidebar {
    position: fixed;
    top: 0;
    left: -280px;
    width: 280px;
    height: 100vh;
    background: linear-gradient(135deg, #1a0d00, #2d1e12);
    color: #e5e5cb;
    padding-top: 60px;
    transition: 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    z-index: 30;
    box-shadow: 5px 0 25px rgba(0, 0, 0, 0.5);
}

.sidebar a {
    display: block;
    padding: 18px 20px;
    text-decoration: none;
    color: #e5e5cb;
    font-size: 16px;
    transition: 0.3s;
    margin: 5px 15px;
    border-radius: 8px;
    border-left: 3px solid transparent;
}

.sidebar a:hover {
    background: rgba(210, 180, 140, 0.15);
    color: #d2b48c;
    border-left: 3px solid #d2b48c;
    transform: translateX(5px);
}

.menu-icon {
    font-size: 30px;
    cursor: pointer;
    position: fixed;
    top: 20px;
    left: 20px;
    color: #d2b48c;
    z-index: 1000;
    background-color: rgba(26, 13, 0, 0.7);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 15px rgba(139, 90, 43, 0.5);
    transition: all 0.3s;
}

.menu-icon:hover {
    transform: rotate(90deg);
    background-color: rgba(210, 180, 140, 0.3);
}

.sidebar.active {
    left: 0;
}

/* Additional button styling */
button {
    margin-left: 10px;
    padding: 8px 15px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

button[textContent="Approve"] {
    background-color: #6b8e23;
    color: white;
}

button[textContent="Approve"]:hover {
    background-color: #556b2f;
    transform: translateY(-2px);
    box-shadow: 0 6px 10px rgba(210, 180, 140, 0.4);
}

button[textContent="Reject"] {
    background-color: #8b4513;
    color: white;
}

button[textContent="Reject"]:hover {
    background-color: #a0522d;
    transform: translateY(-2px);
    box-shadow: 0 6px 10px rgba(210, 180, 140, 0.4);
}
    </style>
    <div class="menu-icon" onclick="toggleSidebar()">&#9776;</div>
    <div class="sidebar" id="sidebar">
        <a href="Employee1.html">Normal Task</a>
        <a href="Reject 1.html">Rejected Task</a>
    </div>
    
    <div class="container">
        <!-- Task list section -->
        <div class="task-list">
            <h3>Tasks Assigned</h3>
            <div id="taskList">
                <!-- Task items will be dynamically inserted here -->
            </div>
        </div>

        <!-- Task details section -->
        <div class="task-window">
            <div class="task-details">
                <h3>Select a task to view details</h3>
                <div id="task-details">
                    <!-- Task details will be dynamically inserted here -->
                </div>
            </div>

            <!-- Task submission section -->
            <div class="task-submit">
                <div class="dropdown">
                    <button id="status-btn">Status: Pending</button>
                    <div class="dropdown-content">
                        <button onclick="updateStatus('Pending')">Pending</button>
                        <button onclick="updateStatus('Working')">Working</button>
                        <button onclick="updateStatus('Done')">Done</button>
                    </div>
                </div>
                
                <div class="dropdown">
                    <button id="condition-btn">Condition</button>
                    <div class="dropdown-content">
                        <button onclick="updateCondition('Good')">Good</button>
                        <button onclick="updateCondition('Fair')">Fair</button>
                        <button onclick="updateCondition('Poor')">Poor</button>
                        <button onclick="updateCondition('Excellent')">Excellent</button>
                    </div>
                </div>
                
                <button id="submit-task-btn" disabled>Submit Task to Admin</button>
            </div>
        </div>
    </div>

    <script>
         function toggleSidebar() {
            var sidebar = document.getElementById("sidebar");
            if (sidebar.classList.contains("active")) {
                sidebar.classList.remove("active");
            } else {
                sidebar.classList.add("active");
            }
        }

        let currentStatus = 'Pending';
        let currentCondition = '';

        function updateStatus(status) {
            currentStatus = status;
            document.getElementById('status-btn').textContent = `Status: ${status}`;
        }

        function updateCondition(condition) {
            currentCondition = condition;
            document.getElementById('condition-btn').textContent = `Condition: ${condition}`;
        }
        
       document.addEventListener("DOMContentLoaded", () => {
    const taskList = document.getElementById("taskList");
    const taskDetailsSection = document.getElementById("task-details");
    const submitTaskBtn = document.getElementById("submit-task-btn");

    let selectedTaskId = null;
    let selectedTaskElement = null; // Store the selected task element
    const timeline = 1; // Employee1.html corresponds to timeline 1

    // Fetch tasks from backend using timeline
    function fetchTasks() {
    fetch(`http://localhost:1080/tasks/${timeline}`)
        .then(response => response.json())
        .then(tasks => {
            console.log("Tasks received from server:", tasks);
            taskList.innerHTML = "";
            if (tasks.length === 0) {
                taskList.innerHTML = "<p>No tasks assigned.</p>";
                return;
            }
            tasks.forEach(task => {
                const taskItem = document.createElement("div");
                taskItem.className = "task-item";
                
                // Calculate the number of days since the task was assigned
                const createdAt = new Date(task.created_at);
                const today = new Date();
                const timeDifference = today - createdAt;
                const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); // Convert milliseconds to days

                taskItem.innerHTML = `
                    <strong>${task.problem_reported}</strong>
                    <br>
                    <span style="font-size: 12px; color: gray;">Assigned ${daysDifference} days ago</span>
                `;
                taskItem.dataset.taskId = task.id;
                taskItem.addEventListener("click", () => showTaskDetails(task, taskItem));
                taskList.appendChild(taskItem);
            });
    })  
        .catch(error => console.error("Error fetching tasks:", error));
}

// Display task details
function showTaskDetails(task, taskItem) {
    selectedTaskId = task.id;
    selectedTaskElement = taskItem;
    
    // Calculate days since the task was assigned
    const createdAt = new Date(task.created_at);
    const today = new Date();
    const timeDifference = today - createdAt;
    const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

    taskDetailsSection.innerHTML = `
        <p><strong>Task ID:</strong> ${task.id}</p>
        <p><strong>Customer Name:</strong> ${task.name}</p>
        <p><strong>Accessories:</strong> ${task.accessories}</p>
        <p><strong>Problem Reported:</strong> ${task.problem_reported}</p>
        <p><strong>Time Assigned:</strong> ${daysDifference} days ago</p>
    `;
    submitTaskBtn.disabled = false;
}


// <span style="font-size: 12px; color: gray;">Time: ${taskTime}</span>

// Display task details
function showTaskDetails(task, taskItem) {
    selectedTaskId = task.id;
    selectedTaskElement = taskItem;
    
    // Convert timestamp to readable date format
    const createdAt = new Date(task.created_at).toLocaleString();

    taskDetailsSection.innerHTML = `
        <p><strong>Task ID:</strong> ${task.id}</p>
        <p><strong>Customer Name:</strong> ${task.name}</p>
        <p><strong>Accessories:</strong> ${task.accessories}</p>
        <p><strong>Problem Reported:</strong> ${task.problem_reported}</p>
        <p><strong>Time Assigned:</strong> ${createdAt}</p>
    `;
    submitTaskBtn.disabled = false;
}


    // Submit task and remove from database and UI
    submitTaskBtn.addEventListener("click", () => {
    if (selectedTaskId && selectedTaskElement) {
        console.log(`🔄 Submitting task ID: ${selectedTaskId}`);
        console.log(`📋 Status: ${currentStatus}, Condition: ${currentCondition}`);

        fetch(`http://localhost:1080/complete-task/${selectedTaskId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                status: currentStatus,
                condition: currentCondition
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log("📥 Response from server:", data);

            if (data.success) {
                alert(`✅ Task submitted successfully!\nStatus: ${currentStatus}\nCondition: ${currentCondition}`);

                // Remove task from UI
                selectedTaskElement.remove();

                // Reset details section and buttons
                selectedTaskId = null;
                selectedTaskElement = null;
                taskDetailsSection.innerHTML = "<p>No task selected.</p>";
                submitTaskBtn.disabled = true;
                
                // Reset status and condition
                currentStatus = 'Pending';
                currentCondition = '';
                document.getElementById('status-btn').textContent = 'Status: Pending';
                document.getElementById('condition-btn').textContent = 'Condition';
            } else {
                alert("❌ Error completing task: " + data.message);
            }
        })
        .catch(error => {
            console.error("❌ Error completing task:", error);
            alert("❌ Failed to submit task.");
        });
    }
});

    // Load initial tasks
    fetchTasks();
});
    </script>
</body>
</html>